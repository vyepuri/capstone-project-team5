


************************************************************************************** UI Service **********************************************************************************
VM  : 2vCPU, 2 GB (ubuntu minimal)
Pod : 2 cpu, 2GiB (ubunut minimal docker image)




Running as apache service and place the code in /var/www/html






------------- VM application boot test --------------------
# Replace with the name of the VirtualBox VM
$vmName = "ubuntu-apache2"

# Replace with the path to the VirtualBox executable (vboxmanage.exe)
$vboxmanage = "C:\Program Files\Oracle\VirtualBox\vboxmanage.exe"

& $vboxmanage startvm $vmName
$timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss.fff"
Write-Host "$timestamp - Virtual machine $vmName started"


#Application boottime testing script

$url = "http://192.168.1.158/"   # Replace with the URL you want to hit
$intervalInMilliseconds = 100      # Replace with the interval in milliseconds between each request
$maxTimeoutInSeconds = 0.5        # Maximum timeout value in seconds

while($true) {
    $response = Invoke-WebRequest -Uri $url -TimeoutSec $maxTimeoutInSeconds
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss.fff"
    Write-Host "$timestamp - $($response.StatusCode) - ($response)"    #$($response.StatusDescription)
    Start-Sleep -Milliseconds $intervalInMilliseconds
}





------------- Pod application boot test --------------------


$url = "http://localhost:30055"
$intervalInMilliseconds = 100

while($true) {
    try {
        $response = Invoke-WebRequest -Uri $url -UseBasicParsing
        if ($response.StatusCode -eq 200) {
            $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss.fff"
            Write-Host "$timestamp - $($response.StatusCode) $($response.StatusDescription)"
        } else {
            $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss.fff"
            Write-Warning "$timestamp - $($response.StatusCode) $($response.StatusDescription)"
        }
    } catch {
        $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss.fff"
        Write-Error "$timestamp - $_"
    }
    Start-Sleep -Milliseconds $intervalInMilliseconds
}



kubectl delete pod $(kubectl get pods -n bookstore -o jsonpath='{.items[*].metadata.name}') -n bookstore
kubectl describe pod $(kubectl get pods -n bookstore -o jsonpath='{.items[*].metadata.name}') -n bookstore


kubectl logs $(kubectl get pods -n bookstore -o jsonpath='{.items[*].metadata.name}') -n bookstore











